apiVersion: v1
kind: ConfigMap
metadata:
  name: functions-configmap
  namespace: functions
data:
  # Core Application Settings
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  PORT: "3000" # Main port for the functions service
  PORT_SECONDARY: "3030" # Secondary port (e.g., for WebSockets, as seen in compose)
  FUNCTION_SERVER_URL: "http://functions-service.functions.svc.cluster.local:3000" # Self-reference for internal calls if needed

  # External URL Placeholders (to be replaced by actual domain names, e.g., via Ingress)
  APP_CLIENT_URL: "https://${HOST_NAME}" # Main frontend application URL
  HANDSHAKE_URL: "https://${HOST_NAME}/v1/handshake" # External URL for handshake service/endpoint
  OAUTH_REDIRECT_URL: "https://${HOST_NAME}/v1/oauth/callback" # Example generic OAuth callback
  GOOGLE_CALENDAR_WEBHOOK_URL: "https://${HOST_NAME}/api/google/calendar/webhook" # Example webhook URL exposed by this functions service

  # Internal Service Discovery URLs
  HASURA_GRAPHQL_GRAPHQL_URL: "http://hasura-service.hasura.svc.cluster.local:8080/v1/graphql"
  HASURA_GRAPHQL_URL: "http://hasura-service.hasura.svc.cluster.local:8080" # Base Hasura URL

  S3_ENDPOINT: "http://minio-service.minio.svc.cluster.local:8484" # Internal MinIO S3 endpoint
  S3_BUCKET: "atomic-assets" # Default bucket name
  # S3_PUBLIC_URL: "http://minio-service.minio.svc.cluster.local:8484/atomic-assets" # Or external if Minio is exposed

  KAFKA_BOOTSTRAP_SERVERS: "kafka-service.kafka.svc.cluster.local:9092" # Kafka brokers
  # KAFKA_SCHEMA_REGISTRY_URL: "http://schema-registry-service.kafka.svc.cluster.local:8081" # If using Schema Registry

  OPENSEARCH_ENDPOINT: "http://opensearch-service.opensearch.svc.cluster.local:9200" # OpenSearch endpoint

  OPTAPLANNER_URL: "http://optaplanner-service.optaplanner.svc.cluster.local:8081" # Optaplanner service endpoint

  # Supertokens (if functions service needs to call Supertokens core directly)
  SUPERTOKENS_CORE_URL: "http://supertokens-service.supertokens.svc.cluster.local:3567"

  # Redis (if used)
  # REDIS_URL: "redis://redis-service.redis.svc.cluster.local:6379"

  # Other non-sensitive configurations from docker-compose or app needs
  TZ: "UTC"
  # CORS settings might be here if not hardcoded
  # CORS_ORIGIN: "https://${HOST_NAME},http://localhost:3001" # Example

  # Nhost specific variables from compose, if non-sensitive and needed by functions directly.
  # Many NHOST_ variables are for configuring Nhost's services themselves or are aliases.
  # NHOST_SERVER_URL: "http://localhost:1337" # Example from compose, likely dev only.
  # NHOST_CONSOLE_URL: "http://localhost:9000" # Example from compose, likely dev only.
  # These are omitted as they seem like local development URLs for other Nhost services,
  # not direct configurations for this 'functions' microservice in a K8s context.
  # If there are specific non-sensitive NHOST_ variables that this 'functions' service consumes, they should be added.

  # Placeholder for the external host name, which will be substituted by Ingress or other mechanisms
  HOST_NAME: "your-app-domain.com" # Example placeholder, actual value depends on deployment

  # Ensure all necessary non-sensitive environment variables from the 'functions' service
  # in the docker-compose.yaml are represented here, adapted for Kubernetes internal service discovery.
