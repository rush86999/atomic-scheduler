apiVersion: v1
kind: Secret
metadata:
  name: functions-secret
  namespace: functions
type: Opaque
data:
  # Basic Auth & General API Keys
  BASIC_AUTH: YWRtaW46cGFzc3dvcmQ= # "admin:password"
  OPENAI_API_KEY: YOUR_OPENAI_API_KEY_HERE_ENCODED # Replace with actual encoded key later
  API_TOKEN: YOUR_API_TOKEN_HERE_ENCODED # e.g., for Optaplanner, same as OPTAPLANNER_PASSWORD

  # Hasura Integration
  HASURA_GRAPHQL_ADMIN_SECRET: bXlhZG1pbnNlY3JldGtleQ== # "myadminsecretkey" (ensure this matches Hasura's actual admin secret)

  # Google OAuth & Services
  GOOGLE_CLIENT_ID_ANDROID: YOUR_GOOGLE_CLIENT_ID_ANDROID_ENCODED
  GOOGLE_CLIENT_ID_IOS: YOUR_GOOGLE_CLIENT_ID_IOS_ENCODED
  GOOGLE_CLIENT_ID_WEB: YOUR_GOOGLE_CLIENT_ID_WEB_ENCODED
  GOOGLE_CLIENT_ID_ATOMIC_WEB: YOUR_GOOGLE_CLIENT_ID_ATOMIC_WEB_ENCODED
  GOOGLE_CLIENT_SECRET_ATOMIC_WEB: YOUR_GOOGLE_CLIENT_SECRET_ATOMIC_WEB_ENCODED
  GOOGLE_CLIENT_SECRET_WEB: YOUR_GOOGLE_CLIENT_SECRET_WEB_ENCODED
  GOOGLE_CALENDAR_ID: YOUR_GOOGLE_CALENDAR_ID_ENCODED
  GOOGLE_CALENDAR_CREDENTIALS: BASE64_ENCODED_GOOGLE_CALENDAR_CREDENTIALS_JSON # Credentials JSON for service account or OAuth client
  GOOGLE_MAP_KEY: YOUR_GOOGLE_MAP_KEY_ENCODED
  GOOGLE_PLACE_API_KEY: YOUR_GOOGLE_PLACE_API_KEY_ENCODED

  # Storage (Minio/S3)
  STORAGE_ACCESS_KEY: bWluaW9hZG1pbg== # "minioadmin" (ensure this matches Minio's root user or a dedicated user)
  STORAGE_SECRET_KEY: bWluaW8xMjM= # "minio123" (ensure this matches Minio's root password or dedicated user's password)
  STORAGE_REGION: dXMtZWFzdC0x # "us-east-1" (example region)

  # Kafka Credentials (if SASL is used; otherwise, these might not be needed for PLAINTEXT)
  KAFKA_USERNAME: YOUR_KAFKA_USERNAME_ENCODED # "user1"
  KAFKA_PASSWORD: YOUR_KAFKA_PASSWORD_ENCODED # "password123"

  # OpenSearch Credentials (if security plugin is enabled; otherwise, not needed for base non-secure OpenSearch)
  OPENSEARCH_USERNAME: YOUR_OPENSEARCH_USERNAME_ENCODED # "admin"
  OPENSEARCH_PASSWORD: YOUR_OPENSEARCH_PASSWORD_ENCODED # "admin"

  # Zoom Integration
  ZOOM_PASS_KEY: YOUR_ZOOM_PASS_KEY_ENCODED
  ZOOM_CLIENT_ID: YOUR_ZOOM_CLIENT_ID_ENCODED
  ZOOM_SALT_FOR_PASS: YOUR_ZOOM_SALT_FOR_PASS_ENCODED
  ZOOM_IV_FOR_PASS: YOUR_ZOOM_IV_FOR_PASS_ENCODED
  ZOOM_CLIENT_SECRET: YOUR_ZOOM_CLIENT_SECRET_ENCODED
  ZOOM_WEBHOOK_SECRET_TOKEN: YOUR_ZOOM_WEBHOOK_SECRET_TOKEN_ENCODED
  NEXT_PUBLIC_ZOOM_CLIENT_ID: YOUR_NEXT_PUBLIC_ZOOM_CLIENT_ID_ENCODED # This seems like a frontend var, but listed in functions env

  # Optaplanner Credentials
  OPTAPLANNER_USERNAME: YOUR_OPTAPLANNER_USERNAME_ENCODED # "admin"
  OPTAPLANNER_PASSWORD: YOUR_OPTAPLANNER_PASSWORD_ENCODED # "admin" (often same as API_TOKEN)

  # SMTP / Email
  SMTP_HOST: YOUR_SMTP_HOST_ENCODED # "smtp.example.com"
  SMTP_PORT: NTI1 # "587" or "465" / "25"
  SMTP_USER: YOUR_SMTP_USER_ENCODED # "user@example.com"
  SMTP_PASS: YOUR_SMTP_PASSWORD_ENCODED # "smtppassword"
  SMTP_FROM_EMAIL: YOUR_SMTP_FROM_EMAIL_ENCODED # "noreply@example.com"

  # Twilio
  TWILIO_ACCOUNT_SID: YOUR_TWILIO_ACCOUNT_SID_ENCODED
  TWILIO_AUTH_TOKEN: YOUR_TWILIO_AUTH_TOKEN_ENCODED
  TWILIO_PHONE_NO: YOUR_TWILIO_PHONE_NO_ENCODED

  # Stripe
  STRIPE_API_KEY: YOUR_STRIPE_API_KEY_ENCODED
  STRIPE_WEBHOOK_SECRET: YOUR_STRIPE_WEBHOOK_SECRET_ENCODED

  # Other External Services / Misc
  ONESIGNAL_APP_ID: YOUR_ONESIGNAL_APP_ID_ENCODED
  ONESIGNAL_REST_API_KEY: YOUR_ONESIGNAL_REST_API_KEY_ENCODED
  SLACK_BOT_TOKEN: YOUR_SLACK_BOT_TOKEN_ENCODED
  SLACK_SIGNING_SECRET: YOUR_SLACK_SIGNING_SECRET_ENCODED
  SLACK_CHANNEL_ID: YOUR_SLACK_CHANNEL_ID_ENCODED
  NODE_ENV: cHJvZHVjdGlvbg== # "production" (can also be in ConfigMap if not sensitive)
  JWT_SECRET: YOUR_JWT_SECRET_KEY_HERE_ENCODED # General JWT secret if used by functions directly
  ENCRYPTION_KEY: YOUR_ENCRYPTION_KEY_HERE_ENCODED # General encryption key

  # Placeholder for any missing secrets, use simple base64 encoded "value"
  # For example, 'YOUR_OPENAI_API_KEY_HERE_ENCODED' should be the base64 of "YOUR_OPENAI_API_KEY_HERE"
  # "YOUR_OPENAI_API_KEY_HERE" -> WU9VUl9PUEVOQUlfQVBJX0tFWV9IRVJFX0VOQ09ERUQ=
  # To avoid making this initial generation too complex, I've used descriptive placeholder names.
  # These would be replaced by actual base64 encoded secret values in a real setup.
  # For now, I'll use a generic encoded placeholder for those not explicitly given.
  # Generic placeholder "VALUE" -> VkFMVUU=
  PLACEHOLDER_SECRET: VkFMVUU=

# Note: For actual deployment, each placeholder like 'YOUR_OPENAI_API_KEY_HERE_ENCODED'
# must be replaced with the *actual base64 encoded secret value*.
# Example for OPENAI_API_KEY: if key is "sk-123", base64 is "c2stMTIz".
# The current values are descriptive placeholders, not actual encoded values of those descriptions.
# I will update a few common ones to reflect actual encoding of a placeholder string.
# For example, for OPENAI_API_KEY, if the placeholder string is "openai_api_key_placeholder",
# its base64 is "b3BlbmFpX2FwaV9rZXlfcGxhY2Vob2xkZXI=". I will use this pattern for a few.

# Re-encoding some common placeholders with "placeholder_value" as the string:
# "placeholder_value" -> cGxhY2Vob2xkZXJfdmFsdWU=
# This will be used for keys that don't have a more specific placeholder from the prompt.

# Overwriting some with a generic encoded placeholder:
# (This is illustrative; in a real scenario, each would be unique)
  OPENAI_API_KEY: cGxhY2Vob2xkZXJfdmFsdWU=
  API_TOKEN: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_CLIENT_ID_ANDROID: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_CLIENT_ID_IOS: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_CLIENT_ID_WEB: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_CLIENT_ID_ATOMIC_WEB: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_CLIENT_SECRET_ATOMIC_WEB: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_CLIENT_SECRET_WEB: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_CALENDAR_ID: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_CALENDAR_CREDENTIALS: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_MAP_KEY: cGxhY2Vob2xkZXJfdmFsdWU=
  GOOGLE_PLACE_API_KEY: cGxhY2Vob2xkZXJfdmFsdWU=
  KAFKA_USERNAME: cGxhY2Vob2xkZXJfdmFsdWU=
  KAFKA_PASSWORD: cGxhY2Vob2xkZXJfdmFsdWU=
  OPENSEARCH_USERNAME: cGxhY2Vob2xkZXJfdmFsdWU=
  OPENSEARCH_PASSWORD: cGxhY2Vob2xkZXJfdmFsdWU=
  ZOOM_PASS_KEY: cGxhY2Vob2xkZXJfdmFsdWU=
  ZOOM_CLIENT_ID: cGxhY2Vob2xkZXJfdmFsdWU=
  ZOOM_SALT_FOR_PASS: cGxhY2Vob2xkZXJfdmFsdWU=
  ZOOM_IV_FOR_PASS: cGxhY2Vob2xkZXJfdmFsdWU=
  ZOOM_CLIENT_SECRET: cGxhY2Vob2xkZXJfdmFsdWU=
  ZOOM_WEBHOOK_SECRET_TOKEN: cGxhY2Vob2xkZXJfdmFsdWU=
  NEXT_PUBLIC_ZOOM_CLIENT_ID: cGxhY2Vob2xkZXJfdmFsdWU=
  OPTAPLANNER_USERNAME: cGxhY2Vob2xkZXJfdmFsdWU=
  OPTAPLANNER_PASSWORD: cGxhY2Vob2xkZXJfdmFsdWU= # Often same as API_TOKEN
  SMTP_HOST: cGxhY2Vob2xkZXJfdmFsdWU=
  SMTP_PORT: NTg3 # "587"
  SMTP_USER: cGxhY2Vob2xkZXJfdmFsdWU=
  SMTP_PASS: cGxhY2Vob2xkZXJfdmFsdWU=
  SMTP_FROM_EMAIL: bm9yZXBseUBleGFtcGxlLmNvbQ== # "noreply@example.com"
  TWILIO_ACCOUNT_SID: cGxhY2Vob2xkZXJfdmFsdWU=
  TWILIO_AUTH_TOKEN: cGxhY2Vob2xkZXJfdmFsdWU=
  TWILIO_PHONE_NO: cGxhY2Vob2xkZXJfdmFsdWU=
  STRIPE_API_KEY: cGxhY2Vob2xkZXJfdmFsdWU=
  STRIPE_WEBHOOK_SECRET: cGxhY2Vob2xkZXJfdmFsdWU=
  ONESIGNAL_APP_ID: cGxhY2Vob2xkZXJfdmFsdWU=
  ONESIGNAL_REST_API_KEY: cGxhY2Vob2xkZXJfdmFsdWU=
  SLACK_BOT_TOKEN: cGxhY2Vob2xkZXJfdmFsdWU=
  SLACK_SIGNING_SECRET: cGxhY2Vob2xkZXJfdmFsdWU=
  SLACK_CHANNEL_ID: cGxhY2Vob2xkZXJfdmFsdWU=
  JWT_SECRET: VGhpcyBpcyBhIHZlcnkgc2VjdXJlIGFuZCBsb25nIEpXVCBzZWNyZXQga2V5 # "This is a very secure and long JWT secret key"
  ENCRYPTION_KEY: VGhpcyBpcyBhIHZlcnkgc2VjdXJlIGFuZCBsb25nIGVuY3J5cHRpb24ga2V5 # "This is a very secure and long encryption key"
