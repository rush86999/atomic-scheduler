apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# This is the root Kustomization file for the 'base' Kubernetes manifests.
# It aggregates all the individual service components, each defined in its own subdirectory
# and managed by its own kustomization.yaml file.
# Applying this kustomization (e.g., `kubectl apply -k deploy/kubernetes/base/`)
# will deploy all the base services into the cluster, each typically in its own namespace.

resources:
  # Ingress Controller
  - ./traefik

  # Data Stores & Message Queues
  - ./minio
  - ./postgres
  - ./kafka # Includes Zookeeper and Kafka Broker
  - ./opensearch

  # Authentication & Authorization
  - ./supertokens
  - ./oauth # Handles OAuth flows for other services

  # Backend Services / Core Logic
  - ./hasura # GraphQL Engine
  - ./functions # Serverless functions / Microservices / Backend logic
  - ./optaplanner # Scheduling service

  # Frontend / Edge Services
  - ./app # Main frontend application
  - ./handshake # Handshake Next.js application

# Common labels and annotations can be defined here to apply to all resources
# across all included kustomizations if desired. However, it's often cleaner
# to manage them within each component's kustomization or via overlays,
# especially since each component here has its own namespace.
#
# Example (if you wanted to apply these to ALL resources from ALL sub-kustomizations):
# commonLabels:
#   environment: base
#   project: atomic-stack # Replace with your actual project identifier
#
# commonAnnotations:
#   managed-by: kustomize
#   owner: platform-team

# Note: The order of resources listed here generally does not affect deployment order
# for Kustomize, as dependencies are typically managed by Kubernetes itself or
# through explicit 'dependsOn' annotations if needed for specific CRD readiness, etc.
# However, grouping them logically (e.g., by type or dependency) can improve readability.
