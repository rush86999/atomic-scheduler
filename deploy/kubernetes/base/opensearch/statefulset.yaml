apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: opensearch
  namespace: opensearch
  labels:
    app: opensearch
spec:
  serviceName: "opensearch-headless" # Must match the headless Service name
  replicas: 1 # For base simplicity
  selector:
    matchLabels:
      app: opensearch
  template:
    metadata:
      labels:
        app: opensearch
    spec:
      terminationGracePeriodSeconds: 30 # Allow time for OpenSearch to shut down gracefully
      # OpenSearch official Docker images run as 'opensearch' user (UID 1000).
      # If the storage provisioner creates volumes owned by root, fsGroup might be needed.
      # However, many modern CSI drivers handle this, or the image itself manages permissions on /usr/share/opensearch/data.
      # securityContext:
      #   fsGroup: 1000 # Ensure the OpenSearch user can write to the volume
      initContainers:
      # Set vm.max_map_count required by OpenSearch. This needs privileged access or node configuration.
      # This initContainer is best effort and might not work on all clusters depending on security policies.
      - name: configure-sysctl
        image: busybox:1.36 # Or any image with sysctl
        command: ["sh", "-c", "sysctl -w vm.max_map_count=262144 || true"] # Attempt to set, proceed if it fails
        securityContext:
          privileged: true # Requires appropriate PSP/SCC or cluster configuration allowing privileged initContainers
      containers:
        - name: opensearch
          image: opensearchproject/opensearch:1.2.0 # As specified
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add: ["IPC_LOCK"] # Required for bootstrap.memory_lock=true
            # runAsUser: 1000 # Usually not needed as image specifies user
            # runAsGroup: 1000
          ports:
            - name: http # REST API
              containerPort: 9200
              protocol: TCP
            - name: transport # Node-to-node communication
              containerPort: 9600
              protocol: TCP
          env:
            - name: cluster.name
              value: "opensearch-cluster"
            - name: node.name # Set node name dynamically from pod metadata name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            # For single-node cluster, discovery.seed_hosts can point to itself or be empty if discovery.type=single-node.
            # Using FQDN of the pod for consistency if ever scaled, though single-node type handles it.
            - name: discovery.seed_hosts
              value: "opensearch-0.opensearch-headless.opensearch.svc.cluster.local"
            - name: cluster.initial_master_nodes # For bootstrapping a new cluster
              valueFrom: # Use pod name (e.g. opensearch-0)
                fieldRef:
                  fieldPath: metadata.name
            - name: bootstrap.memory_lock # Lock JVM memory, ensure IPC_LOCK capability and host ulimits
              value: "true"
            - name: OPENSEARCH_JAVA_OPTS # Configure JVM heap size
              value: "-Xms512m -Xmx512m" # As specified
            - name: DISABLE_INSTALL_DEMO_CONFIG # Disables demo security plugin for a non-secure base
              value: "true"
            # Crucial for single-node setup to avoid issues with discovery trying to find other masters.
            - name: discovery.type
              value: "single-node"
            # Optional: set path.data if it differs from the default /usr/share/opensearch/data
            # - name: path.data
            #   value: "/usr/share/opensearch/data"
          volumeMounts:
            - name: data # Must match volumeClaimTemplates.metadata.name
              mountPath: /usr/share/opensearch/data
          readinessProbe:
            httpGet:
              path: /_cluster/health?local=true # Check local node health status
              port: http # Port 9200
              scheme: HTTP # Assuming HTTP for now, as demo security is disabled
            initialDelaySeconds: 20 # OpenSearch can take some time to start
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /_cluster/health?local=true
              port: http
              scheme: HTTP
            initialDelaySeconds: 60 # More conservative for liveness
            periodSeconds: 30
            timeoutSeconds: 10 # Longer timeout for liveness
            failureThreshold: 5
  volumeClaimTemplates:
  - metadata:
      name: data # This name is referenced in volumeMounts.name
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi # As specified
      # storageClassName: "your-storage-class" # Optional: specify if not using default SC.
