# deploy/kubernetes/overlays/aws/resources/secret-provider-classes.yaml
# This file defines SecretProviderClass resources for integrating AWS Secrets Manager
# with Kubernetes workloads using the Secrets Store CSI Driver.

# --- Prerequisites ---
# 1. AWS Secrets Store CSI Driver must be installed in your EKS cluster.
# 2. The IAM role associated with the EKS nodes (or the specific Service Account if using IRSA for the driver/pods)
#    must have an IAM policy granting permissions to access the specified secrets in AWS Secrets Manager.
#    Example permissions needed: "secretsmanager:GetSecretValue", "secretsmanager:DescribeSecret".
#    The resource scope should list the ARNs of all secrets being accessed.
#    (Refer to deploy/aws/terraform/iam.tf for CodeBuild role policy which has similar secret access patterns).

# --- SecretProviderClass for PostgreSQL Credentials (AWS) ---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: postgres-db-creds-spc-aws # Suffix '-aws' for clarity in multi-cloud setups
  namespace: postgres # Target namespace for the K8s Secret and for pods mounting this
spec:
  provider: aws
  parameters:
    # The 'objects' parameter is a YAML string defining which secrets to fetch.
    # objectName should be the name or ARN of the secret in AWS Secrets Manager.
    # Assuming secrets are named "atomic/SECRET_NAME_SUFFIX" based on Terraform setup.
    objects: |
      - objectName: "atomic/POSTGRES_USER"
        objectType: "secretsmanager" # Explicitly state type, though often inferred
      - objectName: "atomic/POSTGRES_PASSWORD"
        objectType: "secretsmanager"
    # region: "YOUR_AWS_REGION" # Optional: Only if secrets are in a different region than the EKS cluster/nodes.

  # secretObjects defines Kubernetes Secret resources to be created from the fetched secrets.
  # This allows pods to consume secrets as environment variables in a standard way.
  secretObjects:
    - secretName: postgres-credentials-aws # Name of the K8s Secret to create
      type: Opaque
      data:
        # 'objectName' here refers to the objectName defined in the 'parameters.objects' array above.
        # 'key' is the key name that will be created in the Kubernetes Secret.
        - objectName: "atomic/POSTGRES_USER"
          key: POSTGRES_USER
        - objectName: "atomic/POSTGRES_PASSWORD"
          key: POSTGRES_PASSWORD

---
# --- SecretProviderClass for MinIO Credentials (AWS) ---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: minio-creds-spc-aws
  namespace: minio # Target namespace
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "atomic/STORAGE_ACCESS_KEY" # Corresponds to MINIO_ROOT_USER in compose
        objectType: "secretsmanager"
      - objectName: "atomic/STORAGE_SECRET_KEY" # Corresponds to MINIO_ROOT_PASSWORD in compose
        objectType: "secretsmanager"
  secretObjects:
    - secretName: minio-credentials-aws
      type: Opaque
      data:
        # Mapping AWS SM secret (via its objectName) to desired K8s Secret keys
        - objectName: "atomic/STORAGE_ACCESS_KEY"
          key: MINIO_ROOT_USER # Key expected by the MinIO deployment
        - objectName: "atomic/STORAGE_SECRET_KEY"
          key: MINIO_ROOT_PASSWORD # Key expected by the MinIO deployment

---
# --- SecretProviderClass for Functions Service Application Secrets (AWS) ---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: functions-app-secrets-spc-aws
  namespace: functions # Target namespace
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "atomic/OPENAI_API_KEY"
        objectType: "secretsmanager"
      - objectName: "atomic/HASURA_GRAPHQL_ADMIN_SECRET"
        objectType: "secretsmanager"
      - objectName: "atomic/BASIC_AUTH_FUNCTIONS" # As per prompt for this SPC definition
        objectType: "secretsmanager"
      - objectName: "atomic/GOOGLE_CLIENT_ID_ATOMIC_WEB"
        objectType: "secretsmanager"
      - objectName: "atomic/ZOOM_CLIENT_SECRET"
        objectType: "secretsmanager"
      # Add other secrets for the 'functions' service as needed, for example:
      # - objectName: "atomic/API_TOKEN"
      #   objectType: "secretsmanager"
      # - objectName: "atomic/STRIPE_API_KEY" # Assuming it's stored in SM
      #   objectType: "secretsmanager"

  secretObjects:
    - secretName: functions-app-credentials-aws
      type: Opaque
      data:
        # These keys will be created in the K8s Secret 'functions-app-credentials-aws'.
        # The value for each key will be the content of the corresponding AWS Secret.
        - objectName: "atomic/OPENAI_API_KEY"
          key: OPENAI_API_KEY
        - objectName: "atomic/HASURA_GRAPHQL_ADMIN_SECRET"
          key: HASURA_GRAPHQL_ADMIN_SECRET
        - objectName: "atomic/BASIC_AUTH_FUNCTIONS" # Source from AWS SM
          key: BASIC_AUTH                         # Target key in K8s Secret, as expected by the 'functions' app deployment
        - objectName: "atomic/GOOGLE_CLIENT_ID_ATOMIC_WEB"
          key: GOOGLE_CLIENT_ID_ATOMIC_WEB
        - objectName: "atomic/ZOOM_CLIENT_SECRET"
          key: ZOOM_CLIENT_SECRET
        # - objectName: "atomic/API_TOKEN"
        #   key: API_TOKEN
        # - objectName: "atomic/STRIPE_API_KEY"
        #   key: STRIPE_API_KEY

# --- General Notes on Usage ---
# - The `objectName` in `parameters.objects` must exactly match the name or ARN of the secret in AWS Secrets Manager.
#   The Terraform setup (deploy/aws/terraform/secrets_manager.tf) created secrets with names like "atomic/SECRET_KEY_SUFFIX".
# - If a secret in AWS Secrets Manager is a JSON string with multiple key-value pairs, and you only need specific values,
#   you can use the `jmesPath` parameter within the object definition under `parameters.objects`. For example:
#   - objectName: "atomic/MY_JSON_SECRET"
#     objectType: "secretsmanager"
#     jmesPath: "MyJsonKey" # Extracts the value of "MyJsonKey" from the JSON secret
#   Then, in `secretObjects.data`, `objectName: "atomic/MY_JSON_SECRET"` would refer to the extracted value.
# - Pods that need these secrets will mount them using a CSI volume referencing the SecretProviderClass,
#   OR they will reference the Kubernetes Secret (e.g., `postgres-credentials-aws`) created by `secretObjects`
#   to populate environment variables (e.g., using `envFrom`). The latter is often simpler for applications.
