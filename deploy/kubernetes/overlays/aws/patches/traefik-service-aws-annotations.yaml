# deploy/kubernetes/overlays/aws/patches/traefik-service-aws-annotations.yaml
# This patch adds AWS Load Balancer specific annotations to the Traefik service.
# It assumes the base Traefik service is named 'traefik' and is in the 'traefik-ingress' namespace.

apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace: traefik-ingress # Common namespace for Traefik, adjust if different in your base
  annotations:
    # --- AWS Load Balancer Controller Annotations ---

    # Specify the type of load balancer: Network Load Balancer (NLB)
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"

    # Specify the scheme of the load balancer: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"

    # Enable cross-zone load balancing for distributing traffic evenly
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

    # --- Health Check Configuration for the NLB Target Group ---
    # Protocol for health checks. TCP is suitable for an NLB forwarding to Traefik.
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "tcp"

    # Port for health checks. "traffic-port" uses the port of the target group.
    # This means it will check the NodePort that the NLB targets, which forwards to Traefik's service port (e.g., 80 or 443).
    # For Traefik, if the 'web' entrypoint (port 80) is a primary traffic port, this is a good default.
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "traffic-port"
    # Alternatively, if you want to specify the exact service port name or number:
    # service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "80" # if 'web' port is 80
    # service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/ping" # If protocol were HTTP/S and Traefik serves /ping on the traffic port

    # --- Optional: SSL/TLS Termination at the NLB using ACM ---
    # This allows the NLB to handle TLS decryption using a certificate from AWS Certificate Manager (ACM).
    # Traefik can also handle Let's Encrypt or custom certs internally; this is an alternative or can be used in conjunction.
    #
    # 1. Specify the ARN of the ACM certificate:
    #    Replace REGION, ACCOUNT_ID, and CERTIFICATE_ID with your specific values.
    # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:YOUR_AWS_REGION:YOUR_ACCOUNT_ID:certificate/YOUR_CERTIFICATE_ID"
    #
    # 2. Specify which service ports should use SSL/TLS. This should match a port name defined in the Service spec (e.g., 'websecure').
    #    The NLB will listen on this port using HTTPS.
    # service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "websecure" # Or "443" if the port is directly numbered in service spec
    #
    # 3. Optional: Define the SSL policy for the listener (e.g., for security compliance)
    # service.beta.kubernetes.io/aws-load-balancer-ssl-policy: "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"

    # --- Other Optional Annotations (Examples) ---
    # service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*" # Enable PROXY protocol v2 if Traefik is configured for it
    # service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    # service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "your-nlb-access-logs-s3-bucket"
    # service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "traefik"
    # service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-xxxxxxxxxxxxxxxxx, subnet-yyyyyyyyyyyyyyyyy" # Explicit public subnets if needed

    # Note: Ensure the AWS Load Balancer Controller is installed in your EKS cluster
    # and has the necessary IAM permissions to manage LoadBalancers.
    # Always refer to the official AWS Load Balancer Controller documentation for the latest annotations and behaviors.
