# deploy/kubernetes/overlays/gcp/resources/secret-provider-classes-gcp.yaml
# This file defines SecretProviderClass resources for integrating Google Secret Manager
# with Kubernetes workloads using the Secrets Store CSI Driver and GKE Workload Identity.

# --- Prerequisites ---
# 1. Secrets Store CSI Driver and the Google Secret Manager provider must be installed/enabled in your GKE cluster.
#    (The driver is often a GKE addon: `gcp_secrets_store_csi_driver_config { enabled = true }` in GKE cluster TF - though this was missed in gke_cluster.tf, it's a common setup)
#    If not an addon, it needs manual installation.
# 2. GKE Workload Identity must be enabled on the cluster.
#    (This was configured with `workload_identity_config` in `deploy/gcp/terraform/gke_cluster.tf`).
# 3. The Kubernetes Service Account (KSA) for each pod that will mount secrets (or the KSA used by the CSI driver node daemonset if it handles all access)
#    must be annotated to impersonate a Google Service Account (GSA) via Workload Identity.
#    Example KSA annotation: `iam.gke.io/gcp-service-account: "your-gsa-email@your-gcp-project.iam.gserviceaccount.com"`
#    (Patches for default KSAs were created in `deploy/kubernetes/overlays/gcp/patches/serviceaccount-workload-identity-annotations.yaml`).
# 4. The impersonated GSA (e.g., `gke_secret_accessor_gsa_email_input` from Terraform) must have the
#    `roles/secretmanager.secretAccessor` IAM permission on the specific secrets in Google Secret Manager.
#    (This was configured in `deploy/gcp/terraform/secret_manager.tf`).
# 5. The placeholder `${GCP_PROJECT_ID}` in this file MUST be replaced with the actual GCP Project ID
#    during the deployment process (e.g., by a deployment script using `envsubst` or Kustomize variables).

# --- SecretProviderClass for PostgreSQL Credentials (GCP) ---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: postgres-db-creds-spc-gcp # Suffix '-gcp' for clarity
  namespace: postgres # Target namespace for the K8s Secret
spec:
  provider: gcp
  parameters:
    # `secrets` is a YAML string. Each item specifies a secret to fetch.
    # `resourceName` is the full path to the secret version in Google Secret Manager.
    # `SECRET_ID` should match the `secret_id` used in `google_secret_manager_secret` (e.g., "POSTGRES_USER").
    secrets: |
      - resourceName: "projects/${GCP_PROJECT_ID}/secrets/POSTGRES_USER/versions/latest"
      - resourceName: "projects/${GCP_PROJECT_ID}/secrets/POSTGRES_PASSWORD/versions/latest"
    # projectID: "${GCP_PROJECT_ID}" # Alternative way to specify project ID if not in resourceName, but resourceName is more explicit.

  # `secretObjects` defines Kubernetes Secret resources to be created from the fetched secrets.
  secretObjects:
    - secretName: postgres-credentials-gcp # Name of the K8s Secret to create
      type: Opaque
      data:
        # `objectName` here refers to the `SECRET_ID` part of the `resourceName` in the `secrets` array.
        # `key` is the key name that will be created in the Kubernetes Secret.
        - objectName: "POSTGRES_USER" # This is the SECRET_ID from the resourceName
          key: POSTGRES_USER
        - objectName: "POSTGRES_PASSWORD"
          key: POSTGRES_PASSWORD

---
# --- SecretProviderClass for MinIO Credentials (GCP) ---
# Assumes MinIO secrets (STORAGE_ACCESS_KEY, STORAGE_SECRET_KEY) are stored in Google Secret Manager
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: minio-creds-spc-gcp
  namespace: minio # Target namespace
spec:
  provider: gcp
  parameters:
    secrets: |
      - resourceName: "projects/${GCP_PROJECT_ID}/secrets/STORAGE_ACCESS_KEY/versions/latest"
      - resourceName: "projects/${GCP_PROJECT_ID}/secrets/STORAGE_SECRET_KEY/versions/latest"
  secretObjects:
    - secretName: minio-credentials-gcp
      type: Opaque
      data:
        # Mapping Google Secret Manager secret (via its SECRET_ID) to desired K8s Secret keys
        - objectName: "STORAGE_ACCESS_KEY"
          key: MINIO_ROOT_USER # Key expected by the MinIO K8s deployment
        - objectName: "STORAGE_SECRET_KEY"
          key: MINIO_ROOT_PASSWORD # Key expected by the MinIO K8s deployment

---
# --- SecretProviderClass for Functions Service Application Secrets (GCP) ---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: functions-app-secrets-spc-gcp
  namespace: functions # Target namespace
spec:
  provider: gcp
  parameters:
    secrets: |
      - resourceName: "projects/${GCP_PROJECT_ID}/secrets/OPENAI_API_KEY/versions/latest"
      - resourceName: "projects/${GCP_PROJECT_ID}/secrets/HASURA_GRAPHQL_ADMIN_SECRET/versions/latest"
      - resourceName: "projects/${GCP_PROJECT_ID}/secrets/BASIC_AUTH_FUNCTIONS_ADMIN/versions/latest" # Matches TF secret_id
      - resourceName: "projects/${GCP_PROJECT_ID}/secrets/GOOGLE_CLIENT_ID_ATOMIC_WEB/versions/latest"
      - resourceName: "projects/${GCP_PROJECT_ID}/secrets/ZOOM_CLIENT_SECRET/versions/latest"
      # Add other secrets for the 'functions' service as needed, for example:
      # - resourceName: "projects/${GCP_PROJECT_ID}/secrets/API_TOKEN/versions/latest"

  secretObjects:
    - secretName: functions-app-credentials-gcp
      type: Opaque
      data:
        - objectName: "OPENAI_API_KEY"
          key: OPENAI_API_KEY
        - objectName: "HASURA_GRAPHQL_ADMIN_SECRET"
          key: HASURA_GRAPHQL_ADMIN_SECRET
        - objectName: "BASIC_AUTH_FUNCTIONS_ADMIN" # Source SECRET_ID from Google SM
          key: BASIC_AUTH                         # Target key in K8s Secret, as expected by the 'functions' app deployment
        - objectName: "GOOGLE_CLIENT_ID_ATOMIC_WEB"
          key: GOOGLE_CLIENT_ID_ATOMIC_WEB
        - objectName: "ZOOM_CLIENT_SECRET"
          key: ZOOM_CLIENT_SECRET
        # - objectName: "API_TOKEN"
        #   key: API_TOKEN

# --- General Notes on Usage ---
# - The `${GCP_PROJECT_ID}` placeholder must be replaced with your actual GCP Project ID during deployment.
# - The `SECRET_ID` part of `resourceName` (e.g., "POSTGRES_PASSWORD") must exactly match the `secret_id`
#   of the secret in Google Secret Manager (as defined in `deploy/gcp/terraform/secret_manager.tf`).
# - In `secretObjects[].data[]`, `objectName` refers to the `SECRET_ID` from the `resourceName`.
# - `fileName` can be added under each item in `parameters.secrets` if secrets are to be mounted as files with specific names.
#   If `fileName` is used, then `objectName` in `secretObjects.data` should match that `fileName`.
#   Without `fileName`, `objectName` in `secretObjects.data` matches the `SECRET_ID`.
# - Ensure the KSA associated with pods (or the CSI driver itself) that will use these SPCs is correctly
#   configured for Workload Identity and linked to a GSA with `roles/secretmanager.secretAccessor` permissions.
