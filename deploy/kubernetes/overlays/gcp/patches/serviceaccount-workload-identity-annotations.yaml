# deploy/kubernetes/overlays/gcp/patches/serviceaccount-workload-identity-annotations.yaml
# This file contains patches to annotate the default Kubernetes ServiceAccount (KSA)
# in various namespaces to link them to a GCP Service Account (GSA) for Workload Identity.
# This allows pods using the default KSA to impersonate the GSA and access GCP resources
# like Google Secret Manager secrets via the Secrets Store CSI Driver.

# The GSA email used is a placeholder: "atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com"
# Replace "atomic-gcp-project" with your actual GCP project ID.
# The GSA "atomic-gke-wi-sa" needs to be created in GCP and granted necessary permissions
# (e.g., roles/secretmanager.secretAccessor on the specific secrets).

---
# Patch for 'default' ServiceAccount in 'postgres' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: postgres
  annotations:
    iam.gke.io/gcp-service-account: atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com

---
# Patch for 'default' ServiceAccount in 'minio' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: minio
  annotations:
    iam.gke.io/gcp-service-account: atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com

---
# Patch for 'default' ServiceAccount in 'functions' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: functions
  annotations:
    iam.gke.io/gcp-service-account: atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com

---
# Patch for 'default' ServiceAccount in 'supertokens' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: supertokens
  annotations:
    iam.gke.io/gcp-service-account: atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com

---
# Patch for 'default' ServiceAccount in 'hasura' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: hasura
  annotations:
    iam.gke.io/gcp-service-account: atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com

---
# Patch for 'default' ServiceAccount in 'optaplanner' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: optaplanner
  annotations:
    iam.gke.io/gcp-service-account: atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com

---
# Patch for 'default' ServiceAccount in 'handshake' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: handshake
  annotations:
    iam.gke.io/gcp-service-account: atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com

---
# Patch for 'default' ServiceAccount in 'oauth' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: oauth
  annotations:
    iam.gke.io/gcp-service-account: atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com

---
# Patch for 'default' ServiceAccount in 'app' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: app
  annotations:
    iam.gke.io/gcp-service-account: atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com

# Note: If an application uses a non-default ServiceAccount, a similar patch
# would be needed for that specific ServiceAccount.
# These patches assume the default KSA is used by the pods that need to access GCP secrets.
# The GSA "atomic-gke-wi-sa@atomic-gcp-project.iam.gserviceaccount.com" must have been granted
# "roles/secretmanager.secretAccessor" on the relevant secrets in Google Secret Manager,
# and also "roles/iam.workloadIdentityUser" to allow KSAs to impersonate it.
# The Terraform code for `secret_manager.tf` already granted `secretAccessor` to `var.gke_secret_accessor_gsa_email`.
# The GSA itself needs to exist, and the trust relationship between KSA and GSA established.
