# deploy/kubernetes/overlays/gcp/patches/serviceaccount-workload-identity-annotations.yaml
# This file contains patches to annotate the default Kubernetes ServiceAccount (KSA)
# in various application namespaces to link them to a GCP Service Account (GSA) for Workload Identity.
# This allows pods using these KSAs (and the Secrets Store CSI Driver operating on their behalf)
# to impersonate the GSA and access Google Cloud resources like Google Secret Manager secrets.

# The GSA email placeholder `${GKE_SECRET_ACCESSOR_GSA_EMAIL}` will be substituted by the deployment script
# with the actual email of the GSA that has `roles/secretmanager.secretAccessor` permissions.
# (This GSA is created in `deploy/gcp/terraform/iam_service_accounts.tf` as `gke_workload_identity_sa`).
# That GSA must also have `roles/iam.workloadIdentityUser` granted to these KSAs
# (e.g., member "serviceAccount:YOUR_GCP_PROJECT_ID.svc.id.goog[NAMESPACE/default]").
# This binding (KSA -> GSA for workloadIdentityUser role) is also configured in iam_service_accounts.tf.

---
# Patch for 'default' ServiceAccount in 'postgres' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: postgres
  annotations:
    iam.gke.io/gcp-service-account: "${GKE_SECRET_ACCESSOR_GSA_EMAIL}"

---
# Patch for 'default' ServiceAccount in 'minio' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: minio
  annotations:
    iam.gke.io/gcp-service-account: "${GKE_SECRET_ACCESSOR_GSA_EMAIL}"

---
# Patch for 'default' ServiceAccount in 'functions' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: functions
  annotations:
    iam.gke.io/gcp-service-account: "${GKE_SECRET_ACCESSOR_GSA_EMAIL}"

---
# Patch for 'default' ServiceAccount in 'supertokens' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: supertokens
  annotations:
    iam.gke.io/gcp-service-account: "${GKE_SECRET_ACCESSOR_GSA_EMAIL}"

---
# Patch for 'default' ServiceAccount in 'hasura' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: hasura
  annotations:
    iam.gke.io/gcp-service-account: "${GKE_SECRET_ACCESSOR_GSA_EMAIL}"

---
# Patch for 'default' ServiceAccount in 'optaplanner' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: optaplanner
  annotations:
    iam.gke.io/gcp-service-account: "${GKE_SECRET_ACCESSOR_GSA_EMAIL}"

---
# Patch for 'default' ServiceAccount in 'handshake' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: handshake
  annotations:
    iam.gke.io/gcp-service-account: "${GKE_SECRET_ACCESSOR_GSA_EMAIL}"

---
# Patch for 'default' ServiceAccount in 'oauth' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: oauth
  annotations:
    iam.gke.io/gcp-service-account: "${GKE_SECRET_ACCESSOR_GSA_EMAIL}"

---
# Patch for 'default' ServiceAccount in 'app' namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: app
  annotations:
    iam.gke.io/gcp-service-account: "${GKE_SECRET_ACCESSOR_GSA_EMAIL}"

# Note on Secrets Store CSI Driver KSA:
# The Secrets Store CSI Driver's own provider pods (e.g., `csi-secrets-store-provider-gcp` in `kube-system`)
# also run under a KSA. That KSA *itself* needs to be annotated with `iam.gke.io/gcp-service-account`
# pointing to the GSA that has `secretAccessor` permissions if the driver is to fetch secrets directly.
# The patches above are for the *application pods'* KSAs. If an application pod uses a SecretProviderClass volume,
# the CSI driver on that node, when handling the mount for that pod, uses the *pod's KSA* to impersonate the GSA.
# So, annotating the application's KSA (here, `default`) is the correct approach for enabling pods in these namespaces
# to use SecretProviderClass volumes linked to the GSA.
# The GSA (`${GKE_SECRET_ACCESSOR_GSA_EMAIL}`) needs two sets of permissions:
# 1. `roles/secretmanager.secretAccessor` on the secrets themselves (done in `secret_manager.tf`).
# 2. `roles/iam.workloadIdentityUser` for each KSA that will impersonate it (e.g., `serviceAccount:YOUR_PROJECT.svc.id.goog[app/default]`).
#    This binding is configured in `iam_service_accounts.tf` (for the placeholder KSA).
#    This patch file ensures the KSA side (the annotation) is set up. The Terraform `iam_service_accounts.tf`
#    needs to correctly list all these `namespace/default` KSAs as members for the `workloadIdentityUser` role on the GSA.
