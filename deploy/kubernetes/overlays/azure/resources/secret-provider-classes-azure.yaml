# deploy/kubernetes/overlays/azure/resources/secret-provider-classes-azure.yaml
# This file defines SecretProviderClass resources for integrating Azure Key Vault
# with Kubernetes workloads using the Secrets Store CSI Driver.

# --- Prerequisites ---
# 1. Azure Key Vault Provider for Secrets Store CSI Driver must be enabled in your AKS cluster.
#    (This was configured via the `azure_keyvault_secrets_provider` addon in `deploy/azure/terraform/aks_cluster.tf`).
# 2. The Managed Identity used by the Kubelet on AKS nodes (or a specific User-Assigned MI configured for the
#    CSI driver/pods if not using Kubelet's MI by default via the addon) must have the "Key Vault Secrets User"
#    role assigned on the target Azure Key Vault.
#    (This was configured in `deploy/azure/terraform/key_vault.tf` for `var.aks_secret_accessor_identity_object_id`).
# 3. The placeholders `${KEY_VAULT_NAME}` and `${TENANT_ID}` in this file MUST be replaced with actual values
#    during the deployment process (e.g., by a deployment script using `envsubst` or Kustomize variables/configMapGenerator).

# --- SecretProviderClass for PostgreSQL Credentials (Azure) ---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: postgres-db-creds-spc-azure # Suffix '-azure' for clarity
  namespace: postgres # Target namespace for the K8s Secret and for pods mounting this
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"   # Indicates not using aad-pod-identity v1.
                              # For AKS Key Vault addon, this is typically false, relying on Kubelet MI or Workload Identity setup for the driver.
    keyvaultName: "${KEY_VAULT_NAME}" # Placeholder: To be replaced with actual Key Vault name
    tenantId: "${TENANT_ID}"         # Placeholder: To be replaced with actual Tenant ID

    # The 'objects' parameter is a YAML string defining which secrets to fetch.
    # objectName should be the name of the secret in Azure Key Vault.
    objects:  |
      array:
        - |
          objectName: "POSTGRES-USER" # Name of the secret in Azure Key Vault (matches key_vault.tf)
          objectType: "secret"        # Type of object to retrieve
        - |
          objectName: "POSTGRES-PASSWORD"
          objectType: "secret"
    # cloudName: "" # Optional: Defaults to AzurePublicCloud. Use "AzureChinaCloud", "AzureGermanCloud", "AzureUSGovernmentCloud" if needed.

  # secretObjects defines Kubernetes Secret resources to be created from the fetched secrets.
  secretObjects:
    - secretName: postgres-credentials-azure # Name of the K8s Secret to create
      type: Opaque
      data:
        # 'objectName' here refers to the objectName defined in the 'parameters.objects' array above.
        # 'key' is the key name that will be created in the Kubernetes Secret.
        - objectName: "POSTGRES-USER"
          key: POSTGRES_USER
        - objectName: "POSTGRES-PASSWORD"
          key: POSTGRES_PASSWORD

---
# --- SecretProviderClass for MinIO Credentials (Azure) ---
# Assuming MinIO secrets (STORAGE-ACCESS-KEY, STORAGE-SECRET-KEY) are stored in Azure Key Vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: minio-creds-spc-azure
  namespace: minio # Target namespace
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    keyvaultName: "${KEY_VAULT_NAME}"
    tenantId: "${TENANT_ID}"
    objects:  |
      array:
        - |
          objectName: "STORAGE-ACCESS-KEY" # Name in Azure Key Vault (from terraform key_vault.tf)
          objectType: "secret"
        - |
          objectName: "STORAGE-SECRET-KEY" # Name in Azure Key Vault
          objectType: "secret"
  secretObjects:
    - secretName: minio-credentials-azure # Name of the K8s Secret to create
      type: Opaque
      data:
        # Mapping Key Vault secret names (via objectName) to desired K8s Secret keys
        - objectName: "STORAGE-ACCESS-KEY"
          key: MINIO_ROOT_USER # Key expected by the MinIO K8s deployment
        - objectName: "STORAGE-SECRET-KEY"
          key: MINIO_ROOT_PASSWORD # Key expected by the MinIO K8s deployment

---
# --- SecretProviderClass for Functions Service Application Secrets (Azure) ---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: functions-app-secrets-spc-azure
  namespace: functions # Target namespace
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    keyvaultName: "${KEY_VAULT_NAME}"
    tenantId: "${TENANT_ID}"
    objects:  |
      array:
        - |
          objectName: "OPENAI-API-KEY" # Name in Azure Key Vault
          objectType: "secret"
        - |
          objectName: "HASURA-GRAPHQL-ADMIN-SECRET" # Name in Azure Key Vault
          objectType: "secret"
        - |
          objectName: "BASIC-AUTH-FUNCTIONS-ADMIN" # Actual name in Key Vault (from key_vault.tf)
          objectType: "secret"
        - |
          objectName: "GOOGLE-CLIENT-ID-ATOMIC-WEB" # Name in Azure Key Vault
          objectType: "secret"
        - |
          objectName: "ZOOM-CLIENT-SECRET" # Name in Azure Key Vault
          objectType: "secret"
        # Add other secrets for the 'functions' service as needed, for example:
        # - |
        #   objectName: "API-TOKEN" # From key_vault.tf
        #   objectType: "secret"
        # - |
        #   objectName: "STRIPE-API-KEY" # Assuming it's stored in KV
        #   objectType: "secret"

  secretObjects:
    - secretName: functions-app-credentials-azure # Name of the K8s Secret to create
      type: Opaque
      data:
        # These keys will be created in the K8s Secret 'functions-app-credentials-azure'.
        # The value for each key will be the content of the corresponding Azure Key Vault secret.
        - objectName: "OPENAI-API-KEY"
          key: OPENAI_API_KEY
        - objectName: "HASURA-GRAPHQL-ADMIN-SECRET"
          key: HASURA_GRAPHQL_ADMIN_SECRET
        - objectName: "BASIC-AUTH-FUNCTIONS-ADMIN" # Source from Key Vault (matches objectName)
          key: BASIC_AUTH                         # Target key in K8s Secret, as expected by the 'functions' app deployment
        - objectName: "GOOGLE-CLIENT-ID-ATOMIC-WEB"
          key: GOOGLE_CLIENT_ID_ATOMIC_WEB
        - objectName: "ZOOM-CLIENT-SECRET"
          key: ZOOM_CLIENT_SECRET
        # - objectName: "API-TOKEN"
        #   key: API_TOKEN
        # - objectName: "STRIPE-API-KEY"
        #   key: STRIPE_API_KEY

# --- General Notes on Usage ---
# - The `objectName` in `parameters.objects` must exactly match the name of the secret in Azure Key Vault.
#   The Terraform setup (deploy/azure/terraform/key_vault.tf) created secrets with hyphenated names like "POSTGRES-PASSWORD".
# - If a secret in Azure Key Vault is a multi-line string or JSON, it will be fetched as is.
# - Pods that need these secrets will typically reference the Kubernetes `Secret` objects
#   (e.g., `postgres-credentials-azure`) created by `secretObjects` to populate environment variables (e.g., using `envFrom`).
#   Alternatively, they can mount secrets directly as files using a CSI volume referencing the SecretProviderClass.
# - Ensure that the Kubernetes Service Account used by the pods (or the default KSA of the namespace if not specified)
#   is configured for Azure Workload Identity and linked to a GCP Service Account that has been granted
#   "Key Vault Secrets User" permissions on the Key Vault and its secrets.
#   (This was configured in `deploy/azure/terraform/key_vault.tf` for `var.aks_secret_accessor_identity_object_id`).
#   Or, if the AKS Key Vault addon uses the Kubelet's Managed Identity by default, that identity needs the permissions.
